#include <iostream>
//se ejemplifica como funciona
int main()
{
  int a(int n){
      if(n==0)
      return 123;
  }else{
      return a(n-1)+a(n-1)+a(n-1);
  }
   //tarda 1 
   //se saca el orden asintotico
   /*
   n=0   1  cuando es unicamente una constantes pues el tiempo que tarda siempre sera uno 1 
  
  
   n>0  3t(n-1)+1    es tres veces lo mismo y aqui se dice cuanto tarda
   
   T(n) = 3t(n-1)+1 funcio de recurrencia
   
   //////////////////////////////////
   si se sustituye T(n-1)
   
   sus: T(n-1) : 3T (n-2)+1
   
   entonces se cambia por lo mismo de la funcion
   
   
   T(n) = 3(3T (n-2)+1)+1
   T(n) = 9T (n-2) +3 +1 
   /////////////////////////////////
   
   T(n-2):  3T (n-3)+ 1
   T(n)= 9(3T(n-3)+1) + 3+ 1
    T(n)= 27 T(n-3) + 9 + 3 +1
   
   
   //////////////////////////////////////
   
   hay una relacion con la recurrencia en la que vamos
   
   3^i T(n-i)+ 3^i-1  +  3^i-2  + 3^i-3 + .... +3^i-n
   
   se llega al caso base cuando i = n
   
   T(n) = 3^n T(n-n) +  3^i-1  +  3^i-2  + 3^i-3 + .... +3^0
   
   para llegar al base se debe
    T(n) = 3^n + 3^i-1  +  3^i-2  + 3^i-3 + .... +3^0
   
   
   
   
   
   
   
   */
 /*
   
   a(n) n=0 1
        n>0 a(n-2)+ a(n-2)+ a(n-2)+ a(n-2)
        
        
    T(n)
    
    n=0   1
    n>0   4T(n-2)+1
    
    
    T(n)= 4T(n-2)+1     sustitur T(n-2): 4T(n-4)+1 
    
    T(n)= 4(4T(n-4)+1)+1
        = 16T (n-4)+4+1      sus: T(n-4): 4T(n-6)+1
        
        =16(4T(n-6)+1)+4+1
        =64T(n-6)+16+4+1
        
        //////////////////////// y el patron es
   T(n)= 4^i/2  T(n-i)  + 4^i/2-1 + 4^i/2-2+ 4^i/2-3+ .... + 4^0
   
   
   i=n-i
   
   T(n)= 4^n/2  
   
   a^n= a^n+1 -1  / a-1
   
   T(n)= 4 2+1  - 1  / 3     es de orden o(4^n)
   
   
   
   */

return 0;
}
